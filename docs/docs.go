// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "https://rocky.my.id/",
            "email": "rocky@lazycats.id"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/orders": {
            "get": {
                "description": "Fetch all order(s) from the database.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Fetch all orders",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.WithDataList-models_Order"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new order and persists them to the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Create order",
                "parameters": [
                    {
                        "description": "Create Order Request",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/order_requests.OrderCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.WithSingleData-models_Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.Error"
                        }
                    }
                }
            }
        },
        "/orders/{id}": {
            "get": {
                "description": "Fetch an order by its ID from the database.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Fetch single order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.WithSingleData-models_Order"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.Error"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an order with the given ID and payload on the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Update order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Order Payload",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/order_requests.OrderUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.WithSingleData-models_Order"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/responses.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.Error"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an order with the given ID from the database.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Delete order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.WithRowsAffected"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/responses.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/responses.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Item": {
            "description": "Represents an item tied to an order.",
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "A description"
                },
                "itemCode": {
                    "type": "string",
                    "example": "STUFF-1"
                },
                "lineItemId": {
                    "type": "integer",
                    "example": 1
                },
                "quantity": {
                    "type": "integer",
                    "example": 1337
                }
            }
        },
        "models.Order": {
            "description": "Represent an order of a customer with the order date and one or more item(s).",
            "type": "object",
            "properties": {
                "customerName": {
                    "type": "string",
                    "example": "Marvin"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Item"
                    }
                },
                "orderId": {
                    "type": "integer",
                    "example": 1
                },
                "orderedAt": {
                    "type": "string",
                    "example": "2022-02-22T20:00:00.0000000+00:00"
                }
            }
        },
        "order_requests.ItemOnCreate": {
            "description": "Represents a request payload for an item tied to an order create request.",
            "type": "object",
            "required": [
                "description",
                "itemCode",
                "quantity"
            ],
            "properties": {
                "description": {
                    "description": "This is the item description",
                    "type": "string",
                    "example": "A description"
                },
                "itemCode": {
                    "description": "This is the item code",
                    "type": "string",
                    "example": "STUFF-1"
                },
                "quantity": {
                    "description": "This is the item quantity",
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "order_requests.ItemOnUpdate": {
            "description": "Represents a request payload for an item tied to an order create request.",
            "type": "object",
            "required": [
                "description",
                "itemCode",
                "quantity"
            ],
            "properties": {
                "description": {
                    "description": "This is the item description",
                    "type": "string",
                    "example": "A (new) description"
                },
                "itemCode": {
                    "description": "This is the item code",
                    "type": "string",
                    "example": "STUFF-1"
                },
                "lineItemId": {
                    "description": "This is the item ID",
                    "type": "integer",
                    "example": 1
                },
                "quantity": {
                    "description": "This is the item quantity",
                    "type": "integer",
                    "example": 1337
                }
            }
        },
        "order_requests.OrderCreate": {
            "description": "Represents a request payload for order creation.",
            "type": "object",
            "required": [
                "customerName",
                "items"
            ],
            "properties": {
                "customerName": {
                    "description": "This is the customer name",
                    "type": "string",
                    "example": "Marvin"
                },
                "items": {
                    "description": "This is the order items",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/order_requests.ItemOnCreate"
                    }
                }
            }
        },
        "order_requests.OrderUpdate": {
            "description": "Represents a request payload for order update.",
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "customerName": {
                    "description": "This is the customer name",
                    "type": "string",
                    "example": "Marvin"
                },
                "items": {
                    "description": "This is the order items",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/order_requests.ItemOnUpdate"
                    }
                }
            }
        },
        "responses.Error": {
            "description": "Represents the default error response payload.",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "something is wrong"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "responses.WithDataList-models_Order": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 1
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Order"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "responses.WithRowsAffected": {
            "description": "Represents a response payload for any operations with affected row count from the database.",
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 13
                },
                "message": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "responses.WithSingleData-models_Order": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/models.Order"
                },
                "message": {
                    "type": "string",
                    "example": "success"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Hacktiv8 Golang Assignment 2 - Orders",
	Description:      "This is a REST API for a custom shop ordering system.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
